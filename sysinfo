#!/bin/ksh

: '
MIT License

Copyright (c) 2023 Szenesis
Copyright (c) 2024 Dair Aidarkhanov

Original work by Szenesis (https://github.com/Szenesis/sysinfo), modified by
Dair Aidarkhanov.

Permission is hereby granted, free of charge, to any person obtaining a copy of
this software and associated documentation files (the "Software"), to deal in
the Software without restriction, including without limitation the rights to
use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
of the Software, and to permit persons to whom the Software is furnished to do
so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
'

set -eu

readonly VERSION=0.1.0
readonly PROG_NAME=${0##*/}

trap reset_terminal EXIT INT TERM

reset_terminal() {
  # Only restore stty state if we saved it
  [ -n "${ORIG_TERM_STATE:-}" ] && stty "$ORIG_TERM_STATE"
  # Only reset colors if we successfully set them
  [ -n "${reset_colors:-}" ] && printf %s "$reset_colors"
}

usage() {
  cat >&2 << EOF
usage: $PROG_NAME [-Chnv]
  -C        disable color output
  -h        display help
  -n        disable ASCII art
  -v        display version
EOF
  exit ${1:-0}
}

version() {
  echo sysinfo-$VERSION
  exit 0
}

setup_colors() {
  if [ ${USE_COLOR:-1} -eq 1 ] && [ -t 1 ] && command -v tput >/dev/null 2>&1; then
    ORIG_TERM_STATE=$(stty -g)
    reset_colors=$(tput sgr0)
    bold=$(tput bold)
    yellow=$(tput setaf 3)
    green=$(tput setaf 2)
    cyan=$(tput setaf 6)

    # Set up color variables only if we got the reset sequence
    if [ -n "$reset_colors" ]; then
      lc=$reset_colors$bold$yellow  # labels
      uc=$reset_colors$bold$green   # username
      hc=$reset_colors$bold$cyan    # hostname
      ic=$reset_colors              # information
    else
      bold= lc= uc= hc= ic=
    fi
  else
    bold= lc= uc= hc= ic=
  fi
}

get_uptime() {
  uptime 2>/dev/null | awk -F ', ' '{
    sub(/^[[:space:]]*[0-9:]+(AM|PM)?[[:space:]]+/, "")
    sub(/^up /, "")
    split($1, parts, /, /)
    for (i in parts) {
      if (i > 1) printf ","
      printf "%s", parts[i]
    }
  }' | {
    local first_part second_part third_part output=
    IFS=, read -r first_part second_part third_part || true

    process_part() {
      local part=$(echo $1 | sed -E 's/^[[:space:]]*//; s/[[:space:]]*$//')

      # Days
      if echo $part | grep -qE '[0-9]+[[:space:]]+day(s?)'; then
        local d=$(echo $part | sed -E 's/[^0-9]//g')
        printf %dd $((10#$d))
        return 0
      fi

      # HH:MM format
      if echo $part | grep -qE '^[0-9]+:[0-9]+$'; then
        local h=$(echo $part | cut -d: -f1 | sed 's/[^0-9]//g')
        local m=$(echo $part | cut -d: -f2 | sed 's/[^0-9]//g')
        printf %dh\ %dm $((10#$h)) $((10#$m))
        return 0
      fi

      # Hours
      if echo $part | grep -qE '[0-9]+[[:space:]]+(hour|hr)(s?)'; then
        local h=$(echo $part | sed -E 's/[^0-9]//g')
        printf %dh $((10#$h))
        return 0
      fi

      # Minutes
      if echo $part | grep -qE '[0-9]+[[:space:]]+min(s?|ute(s?))'; then
        local m=$(echo $part | sed -E 's/[^0-9]//g')
        printf %dm $((10#$m))
        return 0
      fi

      # Seconds
      if echo $part | grep -qE '[0-9]+[[:space:]]+sec(s?|ond(s?))'; then
        local s=$(echo $part | sed -E 's/[^0-9]//g')
        printf %ds $((10#$s))
        return 0
      fi

      # Numeric fallback (minutes)
      if echo $part | grep -qE '^[0-9]+$'; then
        printf %dm $((10#$part))
        return 0
      fi

      return 1
    }

    for part in "${first_part:-}" "${second_part:-}" "${third_part:-}"; do
      [ -z "${part:-}" ] && continue
      local processed
      processed=$(process_part "$part") || continue
      output=${output:+$output }$processed
    done

    echo ${output:--}
  }
}

get_gpu() {
  local gpu
  gpu=$(dmesg 2>/dev/null | \
    grep -i -E '(gpu|vga|drm|pci|virtio|graphics)' | \
    sed -E -n 's/.*"(.*)".*/\1/p' | \
    grep -i -m1 -E 'gpu|vga|graphics|radeon|nvidia|intel|amd') || true
  echo ${gpu:--}
}

format_size() {
  awk -v bytes=$1 'BEGIN {
    suffix = "BKMGT"
    while (bytes >= 1024 && length(suffix) > 1) {
      bytes /= 1024
      suffix = substr(suffix, 2)
    }
    printf (bytes == int(bytes)) ? "%d%c" : "%.1f%c",
           bytes, substr(suffix,1,1)
  }'
}

get_memory() {
  local total=$(sysctl -n hw.physmem 2>/dev/null) || { echo -; return 0; }
  local pagesize=$(sysctl -n hw.pagesize 2>/dev/null) || { echo -; return 0; }
  local vmstat_output=$(vmstat -s 2>/dev/null) || { echo -; return 0; }

  local active_pages=$(echo "$vmstat_output" | awk '/pages active$/ {print $1}') || active_pages=0
  local wired_pages=$(echo "$vmstat_output" | awk '/pages wired$/ {print $1}') || wired_pages=0
  local free_pages=$(echo "$vmstat_output" | awk '/pages free$/ {print $1}') || free_pages=0

  local used=$((( active_pages + wired_pages) * pagesize ))
  local available=$(((active_pages + wired_pages + free_pages) * pagesize))
  local percent=0

  [ $available -gt 0 ] && percent=$(((used * 100) / available))

  printf '%s / %s (%d%%)' \
    "$(format_size $used)" \
    "$(format_size $total)" \
    "$percent"
}

get_vm_type() {
  local mappings='hypervisor:HyperV vmm:VMM bhyve:bhyve xen:Xen qemu:QEMU \
kvm:KVM vmware:VMware virtualbox:VirtualBox parallels:Parallels'

  local dmesg_out=$(dmesg 2>/dev/null) || return 0

  echo "$mappings" | tr ' ' '\n' | while IFS=: read -r pattern name; do
    if echo "$dmesg_out" | grep -qi "$pattern"; then
      echo $name
      return 0
    fi
  done

  if sysctl -n hw.model 2>/dev/null | grep -qi virtual; then
    echo Virtual
  fi
}

collect_system_info() {
  local user=${USER:-$(id -un)}
  local hostname=$(hostname 2>/dev/null || echo -)
  local os=$(uname -sr 2>/dev/null || echo -)
  local kernel=$(uname -v 2>/dev/null || echo -)
  local machine=$(sysctl -n hw.machine 2>/dev/null || echo -)
  local vm_type=$(get_vm_type)
  local cpu=$(sysctl -n hw.model 2>/dev/null || echo -)
  local cpu_cores=$(sysctl -n hw.ncpuonline 2>/dev/null || echo -)
  local gpu=$(get_gpu)
  local ram=$(get_memory)
  local shell=${SHELL:--}
  [ -n "$shell" ] && shell=${shell##*/}
  local uptime=$(get_uptime)
  local packages=$(pkg_info -q 2>/dev/null | wc -l | tr -d ' ' || echo -)
  local disk=$(df -h / 2>/dev/null | awk 'NR==2 {printf "%s / %s (%s)", $3, $2, $5}' || echo -)

  User=$user Hostname=$hostname OS=$os Kernel=$kernel Machine=$machine
  VM_Type=$vm_type CPU=$cpu CPU_Cores=$cpu_cores GPU=$gpu RAM=$ram
  Shell=$shell Uptime=$uptime Packages=$packages Disk=$disk
}

print_system_info() {
  if [ ${NO_ASCII:-0} -eq 0 ]; then
    cat << EOF
                      ${uc}${User}${ic}${bold}@${hc}${Hostname}${ic}
      _____           ${lc}OS${ic}: ${OS}
   \\-      -/    o    ${lc}Kernel${ic}: ${Kernel}
\\_/          \\  o     ${lc}Machine${ic}: ${Machine}${VM_Type:+ ($VM_Type)}
|         O O |  o    ${lc}CPU${ic}: ${CPU} (${CPU_Cores}*)
|_  <    )  3 ) o     ${lc}GPU${ic}: ${GPU}
/ \\          /        ${lc}Memory${ic}: ${RAM}
   /-_____ -\\         ${lc}Disk${ic} ${bold}(${lc}/${ic}${bold})${ic}: ${Disk}
                      ${lc}Shell${ic}: ${Shell}
                      ${lc}Uptime${ic}: ${Uptime}
                      ${lc}Packages${ic}: ${Packages}
EOF
  else
    cat << EOF
${uc}${User}${ic}${bold}@${hc}${Hostname}${ic}
${lc}OS${ic}: ${OS}
${lc}Kernel${ic}: ${Kernel}
${lc}Machine${ic}: ${Machine}${VM_Type:+ ($VM_Type)}
${lc}CPU${ic}: ${CPU} (${CPU_Cores}*)
${lc}GPU${ic}: ${GPU}
${lc}Memory${ic}: ${RAM}
${lc}Disk${ic}${bold} (${lc}/${ic}${bold})${ic}: ${Disk}
${lc}Shell${ic}: ${Shell}
${lc}Uptime${ic}: ${Uptime}
${lc}Packages${ic}: ${Packages}
EOF
  fi
}

main() {
  local opt use_color=1 no_ascii=0

  [ -n "${NO_COLOR+x}" ] && use_color=0

  while getopts Chnv opt; do
    case $opt in
      C) use_color=0 ;;
      h) usage ;;
      n) no_ascii=1 ;;
      v) version ;;
      *) usage 1 ;;
    esac
  done
  shift $((OPTIND - 1))

  USE_COLOR=$use_color
  NO_ASCII=$no_ascii

  setup_colors
  collect_system_info
  print_system_info
}

main "$@"
