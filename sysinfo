#!/bin/ksh

: '
MIT License

Copyright (c) 2023 Szenesis
Copyright (c) 2024 Dair Aidarkhanov

Original work by Szenesis (https://github.com/Szenesis/sysinfo), modified by
Dair Aidarkhanov.

Permission is hereby granted, free of charge, to any person obtaining a copy of
this software and associated documentation files (the "Software"), to deal in
the Software without restriction, including without limitation the rights to
use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
of the Software, and to permit persons to whom the Software is furnished to do
so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
'

set -eu

VERSION=0.1.0
PROG_NAME=${0##*/}

usage() {
  cat >&2 << EOF
usage: $PROG_NAME [-Chnv]
  -C        disable color output
  -h        display help
  -n        disable ASCII art
  -v        display version
EOF
  exit ${1:-0}
}

version() {
  echo sysinfo-$VERSION
  exit 0
}

setup_colors() {
  if [ ${USE_COLOR:-1} -eq 1 ] && [ -t 1 ] && command -v tput >/dev/null 2>&1; then
    local bold reset yellow green cyan
    bold=$(tput bold 2>/dev/null) || bold=
    reset=$(tput sgr0 2>/dev/null) || reset=
    yellow=$(tput setaf 3 2>/dev/null) || yellow=
    green=$(tput setaf 2 2>/dev/null) || green=
    cyan=$(tput setaf 6 2>/dev/null) || cyan=
  else
    local bold= reset= yellow= green= cyan=
  fi

  lc=$reset$bold$yellow   # labels
  uc=$reset$bold$green    # username
  hc=$reset$bold$cyan     # hostname
  ic=$reset               # information
}

get_uptime() {
  uptime 2>/dev/null | awk -F ', ' '{
    sub(/^[[:space:]]*[0-9:]+(AM|PM)?[[:space:]]+/, "")
    sub(/^up /, "")
    split($1, parts, /, /)
    for (i in parts) {
      if (i > 1) printf ","
      printf "%s", parts[i]
    }
  }' | {
    local first_part second_part third_part
    IFS=, read -r first_part second_part third_part

    process_part() {
      local part=$(echo "$1" | sed -E 's/^[[:space:]]*//; s/[[:space:]]*$//')

      if echo "$part" | grep -qE '[0-9]+[[:space:]]+day(s?)'; then
        local d=$(echo "$part" | sed -E 's/[^0-9]//g')
        printf %dd "$((10#$d))"
        return
      fi

      if echo "$part" | grep -qE '^[0-9]+:[0-9]+$'; then
        local h=$(echo "$part" | cut -d: -f1 | sed 's/[^0-9]//g')
        local m=$(echo "$part" | cut -d: -f2 | sed 's/[^0-9]//g')
        printf %dh\ %dm "$((10#$h))" "$((10#$m))"
        return
      fi

      if echo "$part" | grep -qE '[0-9]+[[:space:]]+hour(s?)'; then
        local h=$(echo "$part" | sed -E 's/[^0-9]//g')
        printf %dh "$((10#$h))"
        return
      fi

      if echo "$part" | grep -qE '[0-9]+[[:space:]]+min(s?|ute(s?))'; then
        local m=$(echo "$part" | sed -E 's/[^0-9]//g')
        printf %dm "$((10#$m))"
        return
      fi

      if echo "$part" | grep -qE '[0-9]+[[:space:]]+sec(s?|ond(s?))'; then
        local s=$(echo "$part" | sed -E 's/[^0-9]//g')
        printf %ds "$((10#$s))"
        return
      fi

      if echo "$part" | grep -qE '^[0-9]+$'; then
        printf %dm "$((10#$part))"
      fi
    }

    local output= processed
    for part in "$first_part" "$second_part" "$third_part"; do
      [ -z "${part:-}" ] && continue
      processed=$(process_part "$part")
      output=${output:+$output }$processed
    done

    echo ${output:--}
  }
}

get_gpu() {
  local gpu
  gpu=$(dmesg 2>/dev/null | \
    grep -i -E '(gpu|vga|drm|pci|virtio|graphics)' | \
    sed -E -n 's/.*"(.*)".*/\1/p' | \
    grep -i -m1 -E 'gpu|vga|graphics|radeon|nvidia|intel|amd') || true
  echo ${gpu:--}
}

format_size() {
  awk -v bytes="$1" 'BEGIN {
    suffix = "BKMGT"
    while (bytes >= 1024 && length(suffix) > 1) {
      bytes /= 1024
      suffix = substr(suffix, 2)
    }
    printf (bytes == int(bytes)) ? "%d%c" : "%.1f%c",
           bytes, substr(suffix,1,1)
  }'
}

get_memory() {
  local total pagesize vmstat_output
  total=$(sysctl -n hw.physmem 2>/dev/null) || { echo -; return 0; }
  pagesize=$(sysctl -n hw.pagesize 2>/dev/null) || { echo -; return 0; }
  vmstat_output=$(vmstat -s 2>/dev/null) || { echo -; return 0; }

  local active_pages wired_pages free_pages
  active_pages=$(echo "$vmstat_output" | awk '/pages active$/ {print $1}') || active_pages=0
  wired_pages=$(echo "$vmstat_output" | awk '/pages wired$/ {print $1}') || wired_pages=0
  free_pages=$(echo "$vmstat_output" | awk '/pages free$/ {print $1}') || free_pages=0

  local used available percent
  used=$((( active_pages + wired_pages) * pagesize ))
  available=$(((active_pages + wired_pages + free_pages) * pagesize))
  percent=0

  [ "$available" -gt 0 ] && percent=$(((used * 100) / available))

  printf '%s / %s (%d%%)' \
    "$(format_size "$used")" \
    "$(format_size "$total")" \
    "$percent"
}

get_vm_type() {
  local mappings='hypervisor:HyperV vmm:VMM bhyve:bhyve xen:Xen qemu:QEMU \
kvm:KVM vmware:VMware virtualbox:VirtualBox parallels:Parallels'

  local dmesg_out
  dmesg_out=$(dmesg 2>/dev/null) || return 0

  echo "$mappings" | tr ' ' '\n' | while IFS=: read -r pattern name; do
    if echo "$dmesg_out" | grep -qi "$pattern"; then
      echo "$name"
      return 0
    fi
  done

  if sysctl -n hw.model 2>/dev/null | grep -qi virtual; then
    echo Virtual
  fi
}

collect_system_info() {
  local user hostname os kernel machine vm_type cpu cpu_cores gpu ram shell uptime packages disk

  user=${USER:-$(id -un)}
  hostname=$(hostname 2>/dev/null || echo -)
  os=$(uname -sr 2>/dev/null || echo -)
  kernel=$(uname -v 2>/dev/null || echo -)
  machine=$(sysctl -n hw.machine 2>/dev/null || echo -)
  vm_type=$(get_vm_type)

  cpu=$(sysctl -n hw.model 2>/dev/null || echo -)
  cpu_cores=$(sysctl -n hw.ncpuonline 2>/dev/null || echo -)
  gpu=$(get_gpu)
  ram=$(get_memory)

  shell=${SHELL:--}
  [ -n "$shell" ] && shell=${shell##*/}
  uptime=$(get_uptime)
  packages=$(pkg_info -q 2>/dev/null | wc -l | tr -d ' ' || echo -)
  disk=$(df -h / 2>/dev/null | awk 'NR==2 {printf "%s / %s (%s)", $3, $2, $5}' || echo -)

  User=$user
  Hostname=$hostname
  OS=$os
  Kernel=$kernel
  Machine=$machine
  VM_Type=$vm_type
  CPU=$cpu
  CPU_Cores=$cpu_cores
  GPU=$gpu
  RAM=$ram
  Shell=$shell
  Uptime=$uptime
  Packages=$packages
  Disk=$disk
}

print_system_info() {
  if [ ${NO_ASCII:-0} -eq 0 ]; then
    cat << EOF
                      ${uc}${User}${reset}${bold}@${hc}${Hostname}${reset}
      _____           ${lc}OS${ic}: ${OS}
   \\-      -/    o    ${lc}Kernel${ic}: ${Kernel}
\\_/          \\  o     ${lc}Machine${ic}: ${Machine}${VM_Type:+ ($VM_Type)}
|         O O |  o    ${lc}CPU${ic}: ${CPU} (${CPU_Cores}*)
|_  <    )  3 ) o     ${lc}GPU${ic}: ${GPU}
/ \\          /        ${lc}Memory${ic}: ${RAM}
   /-_____ -\\         ${lc}Disk${ic} ${bold}(${lc}/${ic}${bold})${ic}: ${Disk}
                      ${lc}Shell${ic}: ${Shell}
                      ${lc}Uptime${ic}: ${Uptime}
                      ${lc}Packages${ic}: ${Packages}
EOF
  else
    cat << EOF
${uc}${User}${reset}${bold}@${hc}${Hostname}${reset}
${lc}OS${ic}: ${OS}
${lc}Kernel${ic}: ${Kernel}
${lc}Machine${ic}: ${Machine}${VM_Type:+ ($VM_Type)}
${lc}CPU${ic}: ${CPU} (${CPU_Cores}*)
${lc}GPU${ic}: ${GPU}
${lc}Memory${ic}: ${RAM}
${lc}Disk${ic}${bold} (${lc}/${ic}${bold})${ic}: ${Disk}
${lc}Shell${ic}: ${Shell}
${lc}Uptime${ic}: ${Uptime}
${lc}Packages${ic}: ${Packages}
EOF
  fi
}

main() {
  local opt use_color=1 no_ascii=0

  [ -n "${NO_COLOR:-}" ] && use_color=0

  while getopts Chnv opt; do
    case $opt in
      C) use_color=0 ;;
      h) usage ;;
      n) no_ascii=1 ;;
      v) version ;;
      *) usage 1 ;;
    esac
  done
  shift $((OPTIND - 1))

  USE_COLOR=$use_color
  NO_ASCII=$no_ascii

  setup_colors
  collect_system_info
  print_system_info
}

main "$@"
